/*
  TYPOGRAPHY
*/

// Required: these font-breakpoint maps need to match the respond-min value of each grid setup in _grid.scss
$typography-breakpoints: (
  g   : 0,                          // g-col
  gw  : $bp-tablet-min,             // gw-col
  gt  : $bp-tablet-lrg-min,         // gt-col
  gtw : $bp-tablet-wide-min,        // gtw-col
  gd  : $bp-desktop-min,            // gd-col
  gdm : $bp-desktop-wide-min,       // gdm-col
);

// FONT SIZES
$fs-h1: ( g : 28, gw : 30, gt : 40, gtw : 44, gd : 48, gdm : 48 );
$fs-h2: ( g : 20, gw : 24, gt : 32, gtw : 36, gd : 42, gdm : 42 );
$fs-h3: ( g : 18, gw : 20, gt : 20, gtw : 22, gd : 32, gdm : 32 );
$fs-h4: ( g : 16, gw : 16, gt : 18, gtw : 18, gd : 20, gdm : 22 );
$fs-h5: ( g : 14, gw : 14, gt : 16, gtw : 16, gd : 18, gdm : 18 );
$fs-h6: ( g : 14, gw : 14, gt : 16, gtw : 16, gd : 18, gdm : 18 );
$fs-bq: ( g : 28, gw : 28, gt : 36, gtw : 36, gd : 40, gdm : 40 );
$fs-content-p: ( g : 16, gw : 18, gt : 18, gtw : 20, gd : 22, gdm : 22 );

// MIXINS
@mixin fs-static($size_in_px) {
  @include respond-min(0) {
    font-size: #{$size_in_px}px;
    font-size: #{calculate-rem($size_in_px)}rem;
  }
}

@mixin fs-responsive($fs-map, $fs-breakpoints: $typography-breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @include respond-min($fs-breakpoint) {
        font-size: #{$fs-font-size}px;
        font-size: #{calculate-rem($fs-font-size)}rem;
      }
    }
  }
}

// Line height (unitless preferred)
$lh: (
 expanded: 1.75,
 base: 1.5,
 tighter: 1.35,
 condensed: 1.25,
 compressed: 1.15,
 crushed: 1,
 smashed: 0.9,
 negative: 0.75
);

// Helper for line heights
@mixin lh($key) {
 @if map-has-key($lh, $key) {
   line-height: map-get($lh, $key);
 }
 @else {
   @warn "Unknown '#{$key}' in map $lh.";
 }
}

// Letter Spacing
$ls-stretched: 0.2em;
$ls-wide: 0.05em;
$ls-med-wide: 0.02em;
$ls-tightish: -0.02em;
$ls-tighter: -0.03em;
$ls-narrow: -0.05em;

// Typographical defaults
body {
  text-rendering: optimizeLegibility; // aestheticallyloyal.com/public/optimize-legibility/
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  word-wrap: break-word;
  -webkit-text-size-adjust: 100%; // Prevents iOS orientation font resize bug
}

h1, h2, h3, h4, h5, h6 {
  font-weight: bold;
  margin: 0 0 1em 0;
}

h1, .fs-h1 {
  @include fs-responsive($fs-h1);
}

h2, .fs-h2 {
  @include fs-responsive($fs-h2);
}

h3, .fs-h3 {
  @include fs-responsive($fs-h3);
}

h4, .fs-h4 {
  @include fs-responsive($fs-h4);
}

h5, .fs-h5 {
  @include fs-responsive($fs-h5);
}

h6, .fs-h6 {
  @include fs-responsive($fs-h6);
}

p {
  @include fs-responsive($fs-content-p);
  line-height: 1.5;
  margin: 0 0 1em 0;
}

strong, b {
  font-weight: bold;
}

small, .small {
  font-size: 13px !important;
}

blockquote,
.blockquote {
  @include fs-responsive($fs-bq);
  @include lh(compressed);
  letter-spacing: $ls-narrow;
}

ol, ul {
  @include fs-responsive($fs-content-p);
  padding-left: 1em;
  margin-top: 1em;

  li {
    line-height: 1.75;
  }
}

.border-link {
  border: 1px solid;
  padding: 0.5em 1em;

  @include respond-min($bp-tablet-wide-min) {
    padding: 0.5em 0.75em;
  }
}
